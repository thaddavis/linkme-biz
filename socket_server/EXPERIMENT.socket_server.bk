<?php
$host = '127.0.0.1';
$port = 12345;
$target_url = 'http://0.0.0.0:8000/EXPERIMENT_receive_message.php'; // The URL of the page to send the message to

// Create a TCP/IP socket
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if ($socket === false) {
    die("socket_create() failed: " . socket_strerror(socket_last_error()));
}

// Bind the socket to the address and port
if (socket_bind($socket, $host, $port) === false) {
    die("socket_bind() failed: " . socket_strerror(socket_last_error($socket)));
}

// Listen for incoming connections
if (socket_listen($socket, 5) === false) {
    die("socket_listen() failed: " . socket_strerror(socket_last_error($socket)));
}

echo "Socket server started on $host:$port\n";

while (true) {
    // Accept incoming connection
    $client = socket_accept($socket);
    if ($client === false) {
        echo "socket_accept() failed: " . socket_strerror(socket_last_error($socket));
        continue;
    }

    // Read data from the client
    $input = socket_read($client, 1024);
    if ($input === false) {
        echo "socket_read() failed: " . socket_strerror(socket_last_error($client));
    } else {
        echo "Received data: $input\n";

        // Send the received data to another page
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $target_url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query(['message' => $input]));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        $response = curl_exec($ch);
        if ($response === false) {
            echo "cURL Error: " . curl_error($ch) . "\n";
        } else {
            echo "Message sent to $target_url\n";
        }

        curl_close($ch);
    }

    // Close the client socket
    socket_close($client);
}

// Close the master socket
socket_close($socket);
?>
